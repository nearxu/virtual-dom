{"version":3,"sources":["vdom/createElement.js","vdom/render.js","vdom/mount.js","vdom/diff.js","main.js"],"names":["createElement","tagName","attrs","children","renderElement","$el","document","Object","entries","k","v","setAttribute","child","appendChild","render","vNode","createTextNode","mount","$node","$target","replaceWith","diff","oldVTree","newVTree","remove","undefined","$newNode","patchAttrs","diffAttrs","atts","patchChildren","diffChildren","oldAttrs","newAttrs","patches","push","removeAttribute","patch","oldChildren","newChildren","childPatches","forEach","oldChild","i","additionalPatches","addtionalChild","slice","length","$parent","zip","childNodes","$child","xs","ys","zipped","Math","min","createApp","count","id","dataCount","String","Array","from","src","vApp","$app","$rootEle","getElementById","console","log"],"mappings":"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","file":"main.1f19ae8e.map","sourceRoot":"..\\src","sourcesContent":["export const createElement = (tagName, { attrs, children }) => {\r\n  return {\r\n    tagName,\r\n    attrs,\r\n    children\r\n  }\r\n}","// v1\r\nexport const renderElement = ({ tagName, attrs, children }) => {\r\n  // create element\r\n  const $el = document.createElement(tagName);\r\n  if (attrs) {\r\n    for (const [k, v] of Object.entries(attrs)) {\r\n      $el.setAttribute(k, v);\r\n    }\r\n  }\r\n  if (children) {\r\n    for (const child of children) {\r\n      $el.appendChild(render(child));\r\n    }\r\n  }\r\n  return $el;\r\n}\r\n\r\n// 实际的DOM中，有8种类型的节点\r\n// simple 2 element <div></div> textNode 'hello world'\r\n// v2\r\nexport const render = (vNode) => {\r\n  // textNode 'hello world'\r\n  if (typeof vNode === 'string') {\r\n    return document.createTextNode(vNode);\r\n  }\r\n  return renderElement(vNode);\r\n}","\r\n// 用渲染出来的$app替换这个空div\r\n// v1\r\nexport const mount = ($node, $target) => {\r\n  $target.replaceWith($node);\r\n  return $node;\r\n}\r\n","import { render } from './render';\r\n\r\nexport const diff = (oldVTree, newVTree) => {\r\n  if (!newVTree) {\r\n    return $node => {\r\n      $node.remove();\r\n      return undefined;\r\n    }\r\n  }\r\n  // node ===string\r\n  if (typeof oldVTree === 'string' || typeof newVTree === 'string') {\r\n    if (oldVTree !== newVTree) {\r\n      return $node => {\r\n        const $newNode = render(newVTree);\r\n        $node.replaceWith($newNode);\r\n        return $newNode;\r\n      }\r\n    } else {\r\n      return $node => $node\r\n    }\r\n  }\r\n  // tagName\r\n  if (oldVTree.tagName !== newVTree.tagName) {\r\n    return $node => {\r\n      const $newNode = render(newVTree);\r\n      $node.replaceWith($newNode);\r\n      return $newNode;\r\n    }\r\n  }\r\n  // oldtree newtree vdom\r\n  // same tag\r\n  // attrs and child some different\r\n  const patchAttrs = diffAttrs(oldVTree.atts, newVTree.attrs);\r\n  const patchChildren = diffChildren(oldVTree.children, newVTree.children);\r\n  return $node => {\r\n    patchAttrs($node);\r\n    patchChildren($node);\r\n    return $node;\r\n  }\r\n}\r\n\r\nexport const diffAttrs = (oldAttrs, newAttrs) => {\r\n  const patches = [];\r\n  //set\r\n  for (const [k, v] of Object.entries(newAttrs)) {\r\n    patches.push($node => {\r\n      $node.setAttribute(k, v);\r\n      return $node;\r\n    })\r\n  }\r\n  // remove attrs\r\n  for (const k in oldAttrs) {\r\n    if (!(k in newAttrs)) {\r\n      patches.push($node => {\r\n        $node.removeAttribute(k);\r\n        return $node;\r\n      })\r\n    }\r\n  }\r\n\r\n  // not understand\r\n  return $node => {\r\n    for (const patch of patches) {\r\n      patch($node);\r\n    }\r\n    return $node;\r\n  }\r\n}\r\n\r\n// len\r\n// \r\nexport const diffChildren = (oldChildren, newChildren) => {\r\n  const childPatches = [];\r\n  // oldVChildren.length === newVChildren.length\r\n  // 从0到oldVChildren.length 调用diff(oldVChildren[i]， newVChildren[i])\r\n  if (oldChildren) {\r\n    oldChildren.forEach((oldChild, i) => {\r\n      childPatches.push(diff(oldChild, newChildren[i]))\r\n    });\r\n  }\r\n\r\n  //oldVChildren.length > newVChildren.length\r\n  const additionalPatches = [];\r\n  if (newChildren) {\r\n    for (const addtionalChild of newChildren.slice(oldChildren.length)) {\r\n      additionalPatches.push($node => {\r\n        $node.appendChild(render(addtionalChild));\r\n        return $node;\r\n      })\r\n    }\r\n  }\r\n  // oldVChildren.length < newVChildren.length\r\n  // 循环将为每个已经存在的子元素创建patches\r\n  // 我们只需要创建其余的子节点，即newVChildren.slice(oldVChildren.length)\r\n  return $parent => {\r\n    // \r\n    // $parent.childNodes.forEach(($child, i) => {\r\n    //   childPatches[i]($child);\r\n    // });\r\n    for (const [patch, $child] of zip(childPatches, $parent.childNodes)) {\r\n      patch($child)\r\n    }\r\n    for (const patch of additionalPatches) {\r\n      patch($parent);\r\n    }\r\n    return $parent;\r\n  }\r\n}\r\n\r\nconst zip = (xs, ys) => {\r\n  const zipped = [];\r\n  for (let i = 0; i < Math.min(xs.length, ys.length); i++) {\r\n    zipped.push([xs[i], ys[i]]);\r\n  }\r\n  return zipped;\r\n};\r\n","import { createElement } from './vdom/createElement';\r\nimport { render } from './vdom/render';\r\nimport { mount } from './vdom/mount';\r\nimport { diff } from './vdom/diff';\r\n// v1\r\n// const vApp = {\r\n//   tagName: \"div\",\r\n//   attrs: { id: \"app\" }\r\n// }\r\n\r\n// v2\r\n// const vApp = createElement('div', {\r\n//   attrs: {\r\n//     id: 'app'\r\n//   },\r\n//   children: [\r\n//     createElement('img', {\r\n//       attrs: {\r\n//         src: 'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif',\r\n//       }\r\n//     })\r\n//   ]\r\n// })\r\n\r\n// v3 change\r\n// const createApp = count => createElement('div', {\r\n//   attrs: {\r\n//     id: 'app',\r\n//     dataCount: count\r\n//   },\r\n//   children: [\r\n//     'this current count is: ',\r\n//     String(count),\r\n//     createElement('img', {\r\n//       attrs: {\r\n//         src: 'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif',\r\n//       }\r\n//     })\r\n//   ]\r\n// })\r\n\r\n// v4 diff\r\nconst createApp = count => createElement('div', {\r\n  attrs: {\r\n    id: 'app',\r\n    dataCount: count\r\n  },\r\n  children: [\r\n    'this current count is: ',\r\n    String(count),\r\n    ...Array.from({ length: count }, () => createElement('img', {\r\n      attrs: {\r\n        src: 'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif',\r\n      }\r\n    }))\r\n  ]\r\n})\r\nlet count = 0;\r\nlet vApp = createApp(count);\r\nconst $app = render(vApp);\r\n// mount($app, document.getElementById('app'))\r\nlet $rootEle = mount($app, document.getElementById('app'))\r\nconsole.log($app);\r\n\r\n// only one\r\n// const newApp = createApp(1);\r\n// const patch = diff(vApp, newApp);\r\n// $rootEle = patch($rootEle);\r\n// vApp = newApp;\r\n\r\n// setInterval(() => {\r\n//   const n = Math.floor(Math.random() * 10);\r\n//   const vNewApp = createApp(n);\r\n//   const patch = diff(vApp, vNewApp);\r\n//   $rootEle = patch($rootEle);\r\n//   vApp = vNewApp;\r\n// }, 2000)\r\n\r\n"]}